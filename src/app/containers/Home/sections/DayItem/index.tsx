/**
 *
 * Home
 *
 */

import React, { memo, useEffect } from 'react';
import { Helmet } from 'react-helmet-async';
import { useTranslation } from 'react-i18next';
import { useSelector, useDispatch } from 'react-redux';
import { weatherData } from 'app/containers/Home/selectors';
import { changeTheme } from 'styles/theme/slice';
import { BinarySearchTree } from 'utils/BynaryTree'; 

import Clouds from 'app/components/Clouds';
import Row from 'app/components/Row';
import Column from 'app/components/Column';
import Text from 'app/components/Text';
import Img from 'app/components/Img';
import { isEmpty } from 'utils/object-is-empty';
import { 
    kelvinToC, 
    daysOfWeek, 
    weatherType, 
    unixTimestamp
} from 'utils/weatherUtils';

import { 
    weatherIcon,
    localeTime,
    getMostNearTemp,
    getMainWeather
 } from 'lib';

import { 

} from 'lib';
interface Props {
    forecastDay: any[]
}
var nearestForecast: any  = {};

export const DayCard = memo((props: Props) => {
    const home = useSelector(weatherData);
    const { t, i18n } = useTranslation();
    const dispatch = useDispatch();
    const { forecastDay } = props;

    /* const */
    const bstTemp = new BinarySearchTree();
    const bstDate = new BinarySearchTree();

    var forecastData = forecastDay?.length ? forecastDay : []  

    forecastData.forEach(item =>{
        bstTemp.add(item.main.temp);
        bstDate.add(new Date(item.dt_txt));
    })
    
    const dateNearToNow = bstDate.findMostClosed(new Date());
    // convert neighbor date to unix timestamp
    var timestamp = unixTimestamp(dateNearToNow);
    // find unix neighbor on forecast array and save current item on nearestForecast;
    forecastData.forEach(item =>{
        if(timestamp && item.dt === timestamp.getTime()/1000){
            nearestForecast = item;
            return;
        }
    })

// the item it expects is "nearestForecast", generated by the previous method
    const dayOfWeekPredict = (item) => { 
        if(isEmpty(item)) return;
        var day = new Date(item.dt_txt).getDay()
        return daysOfWeek[day];
    }

    const getMinTemp = () => bstTemp.findMin();
    const getMaxTemp = () => bstTemp.findMax();
    const getWeatherColor = () => weatherType[getMainWeather(nearestForecast)].color;

    const setTheme =(item) => {
        if(isEmpty(item)) return;
        let key = weatherType[item.weather[0].main].key;
        if(key){
            dispatch(changeTheme(key));
        }
    }
    const useEffectOnMount = (effect: React.EffectCallback) => {
        useEffect(effect, []);
    };

    useEffectOnMount(() => {
        setTheme(nearestForecast)
    });
    
    return (
        <>
        <Helmet>
            <meta name="card-day" content="Weather information 5 days" />
        </Helmet>
        <Column 
            width='200px' height='400px' minWidth='200px'
            shadow='0px 1px 4px 1px rgba(0,0,0,0.25)' 
            margin='0 10px' borderRadius='10px' backgroundColor='#fff'
            justifyContent='flex-start'>
            <Column width='100%' height='50%' backgroundColor={getWeatherColor()}>
                <Row justifyContent='flex-end'>
                    <Text margin='0 10px 0 0' color='#fff' zIndex={1000}>{dayOfWeekPredict(nearestForecast)}</Text>
                </Row>
                
                <Img src={weatherIcon(nearestForecast)}/>
                <Text color='#404040' zIndex={1000}>{`${localeTime(nearestForecast)}`}</Text>
                <Text color='#404040'zIndex={1000}>C° {kelvinToC(getMostNearTemp(nearestForecast))}</Text>
                <Clouds />
            </Column>
            <Row>
                <Column>
                    <Text color='#404040' zIndex={1000}>Min</Text>
                    <Text color='#404040' zIndex={1000}>C° {getMinTemp()}</Text>
                </Column>
                <Column>
                    <Text color='#404040' zIndex={1000}>Max</Text>
                    <Text color='#404040' zIndex={1000}>C° {getMaxTemp()}</Text>
                </Column>
            </Row>
        </Column>
        </>
    );
});


